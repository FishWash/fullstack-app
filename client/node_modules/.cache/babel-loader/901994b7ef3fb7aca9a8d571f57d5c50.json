{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maste\\\\Documents\\\\Programming\\\\React Projects\\\\fullstack_app\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDB = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idToDelete => {\n      parseInt(idToDelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idToDelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://locaclhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat.id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // When component mounts, first thing it does is fetch all existing data in our db.\n  // Then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changese into our UI.\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // Never let a process live forever.\n  // Always kill a process every time we are done using it.\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // Just a note: here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or Delete.\n  // For our back end, we use the object id assigned by MongoDB to modify\n  // data base entries.\n  // Our first GET method that uses our backend API to\n  // fetch data from our data base\n\n\n  // Here is our UI\n  // It's easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const data = this.state.data;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: data.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \" id: \"), \" \", dat.id, \" \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \" data: \"), dat.message))), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: '200px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.message),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"ADD\")), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToDelete: e.target.value\n      }),\n      placeholder: \"put id of item to delete here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.deleteFromDB(this.state.idToDelete),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"DELETE\")), React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToUpdate: e.target.value\n      }),\n      placeholder: \"id of item to update here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        updateToApply: e.target.value\n      }),\n      placeholder: \"put new value of the item here\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\maste\\Documents\\Programming\\React Projects\\fullstack_app\\client\\src\\App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDB","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","getDataFromDb","interval","setInterval","componentWillUnmount","clearInterval","render","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // When component mounts, first thing it does is fetch all existing data in our db.\n  // Then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changese into our UI.\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // Never let a process live forever.\n  // Always kill a process every time we are done using it.\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // Just a note: here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or Delete.\n  // For our back end, we use the object id assigned by MongoDB to modify\n  // data base entries.\n\n  // Our first GET method that uses our backend API to\n  // fetch data from our data base\n  getDataFromDB = () => {\n    fetch('http://localhost:3001/api/getData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }));\n  };\n\n  // Our PUT method that uses our backend API\n  // to create new query into our database\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message\n    });\n  };\n\n  // Our DELETE method that uses our backend API\n  // to remove existing database information\n  deleteFromDB = (idToDelete) => {\n    parseInt(idToDelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToDelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://locaclhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete,\n      },\n    });\n  };\n\n  // Our UPDATE method that uses our backend API\n  // to overwrite existing database information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat.id;\n      }\n    });\n\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply }\n    });\n  };\n\n  // Here is our UI\n  // It's easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n              <li style={{ padding: '10px' }} key={data.message}>\n                <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                <span style={{ color: 'gray' }}> data: </span>\n                {dat.message}\n              </li>\n            ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type='text'\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder='add something in the database'\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input \n            type='text'\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder='put id of item to delete here'\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input \n            type='text'\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder='id of item to update here'\n          />\n          <input\n            type='text'\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder='put new value of the item here'\n          />\n          <button\n            onClick={() => \n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}